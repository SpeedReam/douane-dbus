
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__proxy_hpp__PROXY_MARSHAL_H
#define __dbusxx__proxy_hpp__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace zedroot {

class Douane_proxy
: public ::DBus::InterfaceProxy
{
public:

    Douane_proxy()
    : ::DBus::InterfaceProxy("org.zedroot.Douane")
    {
    }

public:

    /* properties exported by this interface */
        const std::string DaemonVersion() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer(); 
            const std::string interface_name = "org.zedroot.Douane";
            const std::string property_name  = "DaemonVersion";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout; 
            ri >> argout;
            return argout;
        };
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::vector< ::DBus::Struct< std::string, std::string, bool > > GetRules()
    {
        ::DBus::CallMessage call;
        call.member("GetRules");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< std::string, std::string, bool > > argout;
        ri >> argout;
        return argout;
    }

    bool DeleteRule(const std::string& rule_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << rule_id;
        call.member("DeleteRule");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
#endif //__dbusxx__proxy_hpp__PROXY_MARSHAL_H
